<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  

                         http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <cache:annotation-driven cache-manager="cacheManager"/>
    <!-- spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value -->
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <!-- 这里可以配置多个redis -->
                <bean class="com.sofn.core.config.RedisCache">
                    <property name="redisTemplate" ref="redisTemplate"/>
                    <property name="name" value="default"/>
                </bean>
                <bean class="com.sofn.core.config.RedisCache">
                    <property name="redisTemplate" ref="stringRedisTemplate"/>
                    <property name="name" value="common"/>
                    <!-- common名称要在类或方法的注解中使用 -->
                </bean>
            </set>
        </property>
    </bean>
    <!--配置文件加载-->
    <!--<bean id="resourcePropertySource" class="org.springframework.core.io.support.ResourcePropertySource">
        <constructor-arg name="name" value="system.properties"/>
        <constructor-arg name="resource" value="classpath:system.properties"/>
    </bean>-->
    <!--redisCluster配置-->
    <!--<bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <constructor-arg name="propertySource" ref="resourcePropertySource"/>
    </bean>-->
    <!-- 集群配置 -->
    <bean id="jedisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration" >
        <!--
        depends-on="redisClusterConfiguration"
        <constructor-arg name="clusterNodes">
            <set>
                <value>${redisCluster.node1}</value>
                <value>${redisCluster.node2}</value>
                <value>${redisCluster.node3}</value>
                <value>${redisCluster.node4}</value>
                <value>${redisCluster.node5}</value>
                <value>${redisCluster.node6}</value>
            </set>
        </constructor-arg>-->
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster1.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster1.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster2.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster2.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster3.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster3.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster4.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster4.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster5.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster5.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster6.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster6.port}"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>
    <!-- Jedis线程 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="testOnBorrow" value="true"/>
        <!--<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />-->

        <!-- 配置其他连接属性 -->
        <property name="blockWhenExhausted" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="minEvictableIdleTimeMillis" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <property name="numTestsPerEvictionRun" value="-1"/>
    </bean>


    <!--////////////////////////////////////////////////////////////////////////////////////////-->
    <!-- Redis连接 本地单实例 本地测试环境用 -->
    <!--<bean id="jedisConnectionFactory"-->
    <!--class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--<property name="hostName" value="${redis1.host}" />-->
    <!--<property name="port" value="${redis1.port}" />-->
    <!--<property name="poolConfig" ref="jedisPoolConfig" />-->
    <!--</bean>-->

    <!--////////////////////////////////////////////////////////////////////////////////////////-->

    <!-- Redis连接 集群方式 生产开发环境用 -->
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig" ref="jedisClusterConfig" />
        <!--<constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/>-->
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <!--////////////////////////////////////////////////////////////////////////////////////////-->

    <!-- 缓存序列化方式 -->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    <!-- 缓存 redis 模板-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
        <property name="hashKeySerializer" ref="keySerializer"/>
        <property name="hashValueSerializer" ref="valueSerializer"/>
    </bean>

    <!-- 使用StringRedisTemplate 结果更加友好 用于普通的 k-v (string)-->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>
    <!-- redis客户端实例对象，暂时未用 -->
    <!--<bean id="jedisCluster"  class="com.sofn.core.util.JedisClusterFactory" >-->
    <!--&lt;!&ndash;<property name="addressConfig">-->
    <!--<value>classpath:redis.properties</value>-->
    <!--</property>&ndash;&gt;-->
    <!--&lt;!&ndash;<property name="addressKeyPrefix" value="cluster" />&ndash;&gt;   &lt;!&ndash;  属性文件里  key的前缀 &ndash;&gt;-->
    <!--<property name="timeout" value="300000" />-->
    <!--<property name="maxRedirections" value="6" />-->
    <!--<property name="genericObjectPoolConfig" ref="jedisPoolConfig" />-->
    <!--</bean >-->

    <!-- 声明redisCache -->
    <!--<bean id="redisCache" class="com.sofn.core.RedisCacheClient" depends-on="redisCacheConfig">
        <property name="redisCacheConfig" ref="redisCacheConfig"></property>
    </bean>
    <bean id="redisCacheConfig" class="com.sofn.core.config.RedisCacheConfig" depends-on="jedisPoolConfig">
        &lt;!&ndash;<property name="servers"><value>${redis.servers}</value></property>
        <property name="port"><value>${redis.port}</value></property>&ndash;&gt;
        &lt;!&ndash;<property name="password"><value>${redis.password}</value></property>
        <property name="timeout"><value>${redis.timeout}</value></property>&ndash;&gt;
        <property name="poolConfig" ref="jedisPoolConfig"></property>
    </bean>-->

    <bean id="redisHttpSessionConfiguration"
          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <!--超时时间,默认1800秒-->
        <property name="maxInactiveIntervalInSeconds" value="1800"/>
    </bean>

</beans>